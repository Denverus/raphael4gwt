<?xml version="1.0" encoding="UTF-8"?>
<!-- @author: sgurin 
edit gwt.sdk property in build.properties according to your system and perform ant 
to compile the project and build dist/raphael4gwt.jar file
For performing javascript minimization and concatenation call ant js (need linux and yuicompressor.jar in the root folder)
For creating javadocs, you do ant javadocs, will need gwt sources (edit gwt.src property)
-->
<project name="raphael4gwt" default="jar">

	<property file="build.properties"/>
	<description>
        make java doc of all this java project
		@author: sgurin
    </description>

	<target name="all">
		<antcall target="js"/>
		<antcall target="clean"/>
		<antcall target="jar"/>
	</target>

	
	<target name="js">
		<exec dir="src/org/sgx/raphael4gwt/public" executable="sh" >
			<arg line="preparejs.sh"/>
		</exec>
	</target>

	
	<target name="jar" depends="compile">
		<mkdir dir="dist"/>
		<jar destfile="dist/rapahel4gwt-${rapahel4gwt.version}.jar">
			<fileset dir="war/WEB-INF/classes" excludes="**/Test.class" />
			<fileset dir="src" excludes="**/Test.java" />
		</jar>
	</target>



	<target name="clean" depends="">
		<delete dir="dist"/>
		<delete dir="javadoc"/>
		<delete dir="gwt-unitCache"/>
		<delete dir="war/WEB-INF/deploy"/>
		<delete dir="war/org.sgx.raphael4gwt.Raphael4Gwt"/>
		<delete dir="war/org.sgx.raphael4gwt.Raphael4GwtTest"/>
		<delete dir="war/org.sgx.raphael4gwt.GRaphael4Gwt"/>
		<delete dir="war/org.sgx.raphael4gwt.GRaphael4GwtTest"/>
		<delete dir="www-test"/>
	</target>


	
	<path id="gwtc.class.path">
		<pathelement location="${gwt.sdk}/gwt-user.jar" />
		<fileset dir="${gwt.sdk}" includes="gwt-dev*.jar" />
		<fileset dir="war/WEB-INF/lib" includes="**/*.jar" />
		
		
		<!--<pathelement location="src" />		
		<fileset dir="${gwt.sdk}/" includes="**/*.jar" />		
		-->
	</path>
	
	<target name="compile" depends="clean">
		
		<antcall target="gwtc">
			<param name="moduleName" value="org.sgx.raphael4gwt.Raphael4Gwt"/>
		</antcall>

		<antcall target="gwtc">
			<param name="moduleName" value="org.sgx.raphael4gwt.Raphael4GwtTest"/>
		</antcall>

		<antcall target="gwtc">
			<param name="moduleName" value="org.sgx.raphael4gwt.GRaphael4Gwt"/>
		</antcall>		
		
		<antcall target="gwtc">
			<param name="moduleName" value="org.sgx.raphael4gwt.GRaphael4GwtTest"/>
		</antcall>		
		
	</target>
	

	<target name="gwtc" description="individual GWT compile to JavaScript">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="src" />
				<path refid="gwtc.class.path" />				
			</classpath>
			
			<jvmarg value="-Xmx256M" />	
			
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG 		
			<arg value="-draftCompile"></arg>			
			<arg value="-style"></arg>
			<arg value="DETAILED"></arg>-->
			
			<arg value="-war" />
			<arg value="war" />
								
			<arg value="${moduleName}" />			
		</java>
	</target>

			
	
	
	

	<target name="javadocs" depends="" description="generates javadoc and also UML Diagram">

		
		<path id="project.src.path">
			<pathelement location="${reports.dir}/src-all/" />
			<pathelement location="${gwt.src}/user/src/" />
		</path>
			
		
		<!-- first copy all source files from all source folders to a common source folder -->
		<mkdir dir="${reports.dir}/src-all"/>
		<copydir dest="${reports.dir}/src-all/org" src="${reports.dir}/src/org">
		</copydir>

		
		<!-- do the javadoc -->
		<mkdir dir="${reports.dir}/javadoc"/>
		
		<javadoc sourcepathref="project.src.path" packagenames="org.sgx.raphael4gwt.*" 
			excludepackagenames="org.sgx.raphael4gwt.test.*,org.sgx.raphael4gwt.public.*" useexternalfile="true"
			destdir="${reports.dir}/javadoc" private="true">
			
			<doclet name="org.umlgraph.doclet.UmlGraphDoc" path="lib/UmlGraph.jar">
				<param name="-attributes" />
				<param name="-operations" />
				<param name="-qualify" />
				<param name="-types" />
				<param name="-visibility" />
			</doclet>
		</javadoc>
		<apply executable="dot" dest="${reports.dir}" parallel="false">
			<arg value="-Tpng"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<fileset dir="${reports.dir}" includes="*.dot"/>
			<mapper type="glob" from="*.dot" to="*.png"/>
		</apply>
		<delete dir="src-all"/>

	</target>

</project>
